1786 unique words in the list provided.

Longest length words in list - 14 letters each - unique letters:

ADMIN ISTRA TION       =>     ADMINSTRIO       10 unique
CHARA CTERI STIC       =>     CHARTEIS	       8 unique
INTER PRETA TION       =>     INTERPAIO	       9 unique
REPRE SENTA TION       =>     REPRSNTAIO       10 unique
REPRE SENTA TIVE       =>     REPRSNTAIV       10 unique
RESPO NSIBI LITY       =>     RESPONIBLTY      11 unique

Something unclear in the challenge, is what limits there are on the
replacements within a word - e.g. can a letter be replaced by a
double-digit? If yes, there could technically be infinite?

9! = 362880
Easy to find all the squares up to this number.

----

Idea: find all anagrams, by counting the quantity of alphabetical
chars, within an array. Words themselves do not need to be stored.

int8 quantity_of_each_alpha_char[1786 * 26]
[ <quantity of A>, <quantity of B>, <quantity of C>, ... ]
1786 * 26 * 8 / 1024 = ~350mb

int8 quantity_of_total_chars[1786]
[ <word length of line 1, word length of line 2, ... ]

----

It seems that all the anagrams do not have more than 9 unique letters.
So presumably the digit replacements are single digits only!

ACT CAT
ARISE RAISE
BOARD BROAD
CARE RACE
CENTRE RECENT
COURSE SOURCE
CREATION REACTION	=> ACEI NORT
CREDIT DIRECT
DANGER GARDEN
DEAL LEAD
DOG GOD
EARN NEAR
EARTH HEART
EAST SEAT
EAT TEA
EXCEPT EXPECT
FILE LIFE
FORM FROM
FORMER REFORM
HATE HEAT
HOW WHO
IGNORE REGION
INTRODUCE REDUCTION	=> CDEI NORT U
ITEM TIME
ITS SIT
LEAST STEAL
MALE MEAL
MEAN NAME
NIGHT THING
NO ON
NOTE TONE
NOW OWN
PHASE SHAPE
POST SPOT
POST STOP
QUIET QUITE
RATE TEAR
SHEET THESE
SHOUT SOUTH
SHUT THUS
SIGN SING
SPOT STOP
SURE USER
THROW WORTH

----

Once the squares < 362880 are generated, and the anagrams are found,
how to match the two together?

There are x possible combinations of 1-digit unique numbers, where:

x = 9! + 8! + 7! + 6! + 5! + 4! + 3! + 2! + 1!
x = 362880 + 40320 + 5040 + 720 + 120 + 24 + 6 + 2
x = 409112

If I could write a permutation generator that works for different
lengths -- that would allow them to be looked up within pre-generated
squares. I have actually written one before, both in Go and C, so,
will use that then load the permutations from a file.

The challenge question is about finding the largest square number
formed by such as pair, so, potentially only need to focus on 9-digit
numbers?